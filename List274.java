public interface List274<T> {	/**	 * Returns the number of elements in this list	 * @return the number of elements in this list	 */	public int size();	/**	 * Returns true if this list contains no elements.	 * @return true if this list contains no elements	 */	public boolean isEmpty();	/**	 * Removes all of the elements from this list.	 * The list will be empty after this call returns.	 */	public void clear();	/**	 * Returns the element to the specified position.	 * @param index position of targeted item	 * @throws IndexOutOfBoundsException - if the index is	 * out of range (index < 0 || index >= size())	 */	public T get(int index);	/**	 * Sets the element to the specified position.	 * 	 * @param index position of targeted item	 * @param item new value to be placed into the list	 * @throws IndexOutOfBoundsException - if the index is	 * out of range (index < 0 || index >= size())	 */	public T set(int index, T item);	/**	 * Adds the specified element to the end of this list.	 * 	 * @param item element to be added to this list	 */	public void add(T item);	/**	 * Adds the specified element to the specified position.	 * 	 * @param index position where item should be added.	 * @param item element to be added to the end of this list	 * @throws IndexOutOfBoundsException - if the index is	 * out of range (index < 0 || index > size())	 */	public void add(int index, T item);	/**	 * Removes the first occurrence of item from this list if	 * it is present.	 * @param item The item to be removed.	 * @return true if this list contained the specified element	 */	public boolean remove(T item);	/**	 * Removes the item at the specified index.	 * @param index The position to be removed.	 * @return value of item removed	 * @throws IndexOutOfBoundsException - if the index is out	 * of range (index < 0 || index >= size())	 */	public T remove(int index);	/**	 * Returns true if this list contains the specified element. 	 * @param item element whose presence in this list is to be	 * tested.	 * @return true if this list contains the specified element	 */	public boolean contains(T item);	/**	 * Returns first index of the specified element. 	 * @param item element whose presence in this list is to be	 * tested.	 * @return Returns first index of the specified element. -1	 * is returned if item is not in list.	 */	public int indexOf(T item);	/**	 * Returns last index of the specified element. 	 * @param item element whose presence in this list is to be	 * tested.	 * @return Returns last index of the specified element. -1 is	 * returned if	 * items is not in list.	 */	public int lastIndexOf(T item);	/**	 * Returns an array containing all of the elements in this list.	 * The objects will appear in the same order as in the list. 	 * @return an array containing all the elements in this list	 */	public Object[] toArray();}